generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  email    String
  username String

  name  String?
  phone String?

  password  String
  role      Roles      @default(USER)
  client_id String
  client    Clients?   @relation(fields: [client_id], references: [id], onDelete: Cascade)
  CartItems CartItem[]
  orders    Order[]
  address   Address?

  @@unique([username, client_id])
  @@unique([email, client_id])
  @@unique([phone, client_id])
  @@map("users")
}

model Clients {
  id         String    @id @default(uuid())
  name       String
  email      String    @unique
  phone      String    @unique
  password   String    @default("12345678")
  is_active  Boolean   @default(true)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  role       Roles     @default(CLIENT)
  users      User[]
  products   Product[]

  @@map("clients")
}

model Address {
  id           String     @id @default(uuid())
  cep          String
  street       String
  neighborhood String
  city         String
  state        String
  complement   String
  user_id      String     @unique
  user         User?      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  CartItem     CartItem[]
  Order        Order[]

  @@map("address")
}

model Product {
  id          String         @id @default(uuid())
  name        String
  price       Float
  description String
  image       String?
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt
  is_active   Boolean        @default(true)
  is_deleted  Boolean?       @default(false)
  category    String
  client_id   String?
  Clients     Clients?       @relation(fields: [client_id], references: [id], onDelete: Cascade)
  CartItems   CartItem[]
  Order       Order?         @relation(fields: [order_id], references: [id], onDelete: Cascade)
  order_id    String?
  OrderIten   OrderProduct[]

  @@unique([name, client_id])
  @@map("products")
}

model CartItem {
  id Int @id @default(autoincrement())

  user_id    String
  product_id String
  quantity   Int
  address_id String?
  address    Address? @relation(fields: [address_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  order_id   String?

  @@map("cart_item")
}

model Order {
  id           String @id @default(uuid())
  order_number Int    @default(autoincrement())
  user_id      String

  payment_method PaymentMethods
  total          Float
  address        Address        @relation(fields: [address_id], references: [id], onDelete: Cascade)
  user           User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at     DateTime       @default(now())
  products       Product[]
  itens          OrderProduct[]
  address_id     String
}

model OrderProduct {
  id         String  @id @default(uuid())
  quantity   Int
  order_id   String
  order      Order   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product_id String
  product    Product @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

enum PaymentMethods {
  CREDIT_ON_DELIVERY
  DEBIT_ON_DELIVERY
  PIX
  MONEY
}

enum Roles {
  ADMIN
  CLIENT
  USER
}
